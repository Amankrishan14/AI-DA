# -*- coding: utf-8 -*-
"""Barcode detector.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Hdygd2uJ01PDUiYdDOSDiLDkjGxbeMqm
"""

!apt install libzbar0
!apt-get update
!pip install pyzbar

#Preprocessing functions
def blur(image):
    blur = cv2.GaussianBlur(image, (7, 7), 0)
    return blur

def sharpen(image):
   gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
   kernel = np.array([[0, -1, 0],
   [-1, 5, -1],
   [0, -1, 0]])
   sharpened = cv2.filter2D(gray, -1, kernel)
   return sharpened

def gray_scale(image):
  gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
  return gray

def threshold(image):
  # gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
  thresh = cv2.threshold(image,70,90,cv2.THRESH_TOZERO)[1]
  return thresh

def deskew(img):
  co_ords = np.column_stack(np.where(img > 0))
  angle = cv2.minAreaRect(co_ords)[-1]
  if angle < -45:
    angle = -(90 + angle)
  else:
    angle = -angle
  (h, w) = img.shape[:2]
  center = (w // 2, h // 2)
  M = cv2.getRotationMatrix2D(center, -(0.200*angle), 1.0)
  rotated = cv2.warpAffine(img, M, (w, h), flags=cv2.INTER_CUBIC,borderMode=cv2.BORDER_REPLICATE)
  return rotated


import numpy as np
from pyzbar import pyzbar
import cv2
from google.colab.patches import cv2_imshow

#Functions to draw a rectangle around barcode and decode it
def draw_barcode(decoded, image):
    image = cv2.rectangle(image, (decoded.rect.left, decoded.rect.top),
                            (decoded.rect.left + decoded.rect.width, decoded.rect.top + decoded.rect.height),
                            color=(0, 255, 0),
                            thickness=5)
    return image

def decode(image):
    # decodes all barcodes from an image
    decoded_objects = pyzbar.decode(image)
    for obj in decoded_objects:
        # draw the barcode
        print("detected barcode:", obj)
        image = draw_barcode(obj, image)
        # print barcode type & data
        print("Type:", obj.type)
        print("Data:", obj.data)
        print()

    return image

if __name__ == "__main__":
    from glob import glob

    barcodes = glob("/content/Images/Barcode/*.[jJpP][pPnN][gG]")
    #barcodes = glob("Images_path/*.[jJpP][pPnN][gG]")  #this takes images of format .jpeg,.jpg,.png
    for barcode_file in barcodes:
        img = cv2.imread(barcode_file)
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)  #gray scale
        # thresh = threshold(gray) #thresholding-only use for specific images
        # blur=blur(gray)  #blur the image- we found there was no effect on decoding for the sample test images
        # deskew = deskew(gray)  #deskew image-Use to dekskew an image according to the tilt of particular image
        decoded = decode(gray)
        decoded = cv2.resize(decoded, (300, int(300/decoded.shape[1]*decoded.shape[0])))
        # show the image
        cv2_imshow(decoded)
        cv2.waitKey(0)